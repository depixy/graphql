schema {
  query: Query
  mutation: Mutation
}

input BooleanFilter {
  equal: Boolean!
}

input StringFilter {
  contain: String
  endWith: String
  equal: String
  in: [String!]
  not: StringFilter
  notIn: [String!]
  startWith: String
}

input StringNullableFilter {
  contain: String
  endWith: String
  equal: String
  in: [String!]
  not: StringFilter
  notIn: [String!]
  startWith: String
}

input IDFilter {
  equal: ID
  in: [ID!]
  not: IDFilter
  notIn: [ID!]
}

input DateTimeFilter {
  equal: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equal: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input TagListFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

type Image {
  id: ID!
  slug: String!
  name: String!
  post: Post!
  user: User!
  number: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  slug: String!
  name: String!
  tags: [Tag!]!
  images: [Image!]!
  description: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostWhereUniqueInput {
  id: String
  slug: String
}

type Posts {
  count(input: PostWhereInput): Int!
  edges(
    input: PostWhereInput
    pagination: Pagination!
    orderBy: [PostOrderBy!]
  ): [Post!]!
  pageInfo: PageInfo!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  tags: TagListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostOrderBy {
  id: Order
  slug: Order
  name: Order
  createdAt: Order
  updatedAt: Order
}

type Query {
  post(input: PostWhereUniqueInput!): Post
  posts(pagination: Pagination!): Posts!
  tagCategory(input: TagCategoryWhereUniqueInput!): TagCategory
  tagCategories(pagination: Pagination!): TagCategories!
  tag(input: TagWhereUniqueInput!): Tag
  tags(pagination: Pagination!): Tags!
  me: DetailUser
  user(input: UserWhereUniqueInput!): User
  users(pagination: Pagination!): Users!
}

input PostCreateInput {
  slug: String!
  name: String!
  description: String!
  images: [Upload!]!
}

input PostUpdateInput {
  id: ID!
  slug: String
  name: String
}

type Mutation {
  createPost(input: PostCreateInput!): Post!
  updatePost(input: PostUpdateInput!): Post!
  removePosts(input: PostWhereInput!): BatchPayload!
  createTagCategory(input: TagCategoryCreateInput!): TagCategory!
  updateTagCategory(input: TagCategoryUpdateInput!): TagCategory!
  removeTagCategories(input: TagCategoryWhereInput!): BatchPayload!
  createTag(input: TagCreateInput!): Tag!
  updateTag(input: TagUpdateInput!): Tag!
  removeTags(input: TagWhereInput!): BatchPayload!
  login(input: LoginInput!): DetailUser
  logout: Void
  createUser(input: UserCreateInput!): DetailUser!
  createFirstUser(input: UserCreateInput!): DetailUser!
  updateUser(input: UserUpdateInput!): DetailUser!
  removeUsers(input: UserWhereInput!): BatchPayload!
}

type TagCategory {
  id: ID!
  slug: String!
  name: String!
  tags: [Tag!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagCategoryWhereUniqueInput {
  id: String
  slug: String
  name: String
}

type TagCategories {
  count(input: TagCategoryWhereInput): Int!
  edges(
    input: TagCategoryWhereInput
    pagination: Pagination!
    orderBy: [TagCategoryOrderBy!]
  ): [TagCategory!]!
  pageInfo: PageInfo!
}

input TagCategoryWhereInput {
  AND: [TagCategoryWhereInput!]
  OR: [TagCategoryWhereInput!]
  NOT: [TagCategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  tags: TagListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TagCategoryOrderBy {
  id: Order
  slug: Order
  name: Order
  tagCount: Order
  createdAt: Order
  updatedAt: Order
}

input TagCategoryCreateInput {
  slug: String!
  name: String!
}

input TagCategoryUpdateInput {
  id: ID!
  slug: String
  name: String
}

type Tag {
  id: ID!
  slug: String!
  name: String!
  category: TagCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagWhereUniqueInput {
  id: String
  slug: String
  name: String
}

type Tags {
  count(input: TagWhereInput): Int!
  edges(
    input: TagWhereInput
    pagination: Pagination!
    orderBy: [TagOrderBy!]
  ): [Tag!]!
  pageInfo: PageInfo!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TagOrderBy {
  id: Order
  slug: Order
  name: Order
  createdAt: Order
  updatedAt: Order
}

input TagCreateInput {
  categoryId: String!
  slug: String!
  name: String!
}

input TagUpdateInput {
  id: ID!
  slug: String
  name: String
}

type Role {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"""
Represents NULL values
"""
scalar Void

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input Pagination {
  skip: Int!
  take: Int!
}

enum Order {
  asc
  desc
}

type PageInfo {
  skip: Int!
  take: Int!
}

type BatchPayload {
  count: Int!
}

type DetailUser {
  id: ID!
  loginName: String!
  displayName: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]!
  roles: [Role!]!
}

type User {
  id: ID!
  loginName: String!
  displayName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]!
  roles: [Role!]!
}

input UserWhereUniqueInput {
  id: String
  loginName: String
  displayName: String
}

type Users {
  count(input: UserWhereInput): Int!
  edges(
    input: UserWhereInput
    pagination: Pagination!
    orderBy: [UserOrderBy!]
  ): [User!]!
  pageInfo: PageInfo!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  displayName: StringFilter
  loginName: StringFilter
  email: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserOrderBy {
  id: Order
  name: Order
  userCount: Order
  createdAt: Order
  updatedAt: Order
}

input UserCreateInput {
  loginName: String!
  displayName: String!
  email: String!
  password: String!
}

input UserUpdateInput {
  id: ID!
  loginName: String
  displayName: String
  email: String
  password: String
}

input LoginInput {
  loginName: String!
  password: String!
}
